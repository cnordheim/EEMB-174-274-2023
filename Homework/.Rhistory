print("Roses are red,")
print("violets are blue,")
print("R's pretty rad,")
print("and Bayes' rule rules.")
# new code chunk
# Three variables
a <- 42
b = 42
a <- TRUE # Overwrite a with a new value
word_variable <- 'words go in quotes!'  # Variable names don't have spaces
# A list of the three variables
list_of_data <- list(a, b, word_variable)
print(list_of_data)
knitr::opts_chunk$set(echo = TRUE)  # Set up knitr
library(tidyverse)  # Import the tidyverse package
knitr::opts_chunk$set(echo = TRUE)  # ready knitr
k <- 10  # Number of people in a pool
samps <- 10000  # The total number of pools we test.
pos_rate <- 0.05  # The rate at which people have COVID. This is now a variable and is saved.
rbinom(1, size = k, prob = pos_rate)  # This randomly picks the number of people with covid in one pool from a binomial distribution.
pos_rate <- 0.05  # The rate at which people have COVID. This is now a variable and is saved.
rbinom(1, size = k, prob = pos_rate)  # This randomly picks the number of people with covid in one pool from a binomial distribution.
pos_rate <- 0.05  # The rate at which people have COVID. This is now a variable and is saved.
rbinom(1, size = k, prob = pos_rate)  # This randomly picks the number of people with covid in one pool from a binomial distribution.
pos_rate <- 0.05  # The rate at which people have COVID. This is now a variable and is saved.
rbinom(1, size = k, prob = pos_rate)  # This randomly picks the number of people with covid in one pool from a binomial distribution.
pos_rate <- 0.05  # The rate at which people have COVID. This is now a variable and is saved.
rbinom(1, size = k, prob = pos_rate)  # This randomly picks the number of people with covid in one pool from a binomial distribution.
pos_rate <- 0.05  # The rate at which people have COVID. This is now a variable and is saved.
rbinom(1, size = k, prob = pos_rate)  # This randomly picks the number of people with covid in one pool from a binomial distribution.
pos_rate <- 0.05  # The rate at which people have COVID. This is now a variable and is saved.
rbinom(1, size = k, prob = pos_rate)  # This randomly picks the number of people with covid in one pool from a binomial distribution.
pos_rate <- 0.05  # The rate at which people have COVID. This is now a variable and is saved.
rbinom(1, size = k, prob = pos_rate)  # This randomly picks the number of people with covid in one pool from a binomial distribution.
pos_rate <- 0.05  # The rate at which people have COVID. This is now a variable and is saved.
rbinom(1, size = k, prob = pos_rate)  # This randomly picks the number of people with covid in one pool from a binomial distribution.
pos_rate <- 0.05  # The rate at which people have COVID. This is now a variable and is saved.
rbinom(1, size = k, prob = pos_rate)  # This randomly picks the number of people with covid in one pool from a binomial distribution.
# Make 42 random draws from the binomial distribution.
rbinom(42, size = k, prob = pos_rate)
# Make 10 random draws, with positive rate of 50%.
rbinom(10, size = k, prob = 0.5)
# Make 42 random draws from the binomial distribution.
rbinom(42, size = k, prob = pos_rate)
# Make 10 random draws, with positive rate of 50%.
rbinom(10, size = k, prob = 0.5)
# Write your answer here.
rbinom(200, size = 100, prob = 0.5)
# Write your answer here.
# Make 200 random draws with 100 people in the pool, with positive rate of 50%.
rbinom(200, size = 100, prob = 0.5)
?function_name
?rbinom
# Make a vector of all the pools,
# where the i'th pool has the number of people with COVID in it.
positive <- rbinom(n = samps, size = k, prob = pos_rate)
# Arrange data in a tibble.
# Look in your Environment panel and click pools to see what this data looks like.
pools <- tibble(positive)
# Make a plot and say what data we will plot
ggplot(data = pools, aes(x = positive)) +
geom_histogram(binwidth = 1)
# 'mutate' adds two columns to the data frame, one called 'retest'
# and one called 'tests'. These columns are filled with the values provided.
# You can look at the pools variable before and after running this to see what changed!
pools <- mutate(pools, retest = sign(positive) , tests = 1 + retest * k)
# Take mean number of tests needed
mean(pools$tests) / k
# Make a vector of all the pools,
# where the i'th pool has the number of people with COVID in it.
positive <- rbinom(n = samps, size = k, prob = pos_rate)
positive
head(positive)
# Arrange data in a tibble.
# Look in your Environment panel and click pools to see what this data looks like.
pools <- tibble(positive)
head(pools)
pools
View(pools)
# Make a plot and say what data we will plot
ggplot(data = pools, aes(x = positive)) +
geom_histogram(binwidth = 1)
# 'mutate' adds two columns to the data frame, one called 'retest'
# and one called 'tests'. These columns are filled with the values provided.
# You can look at the pools variable before and after running this to see what changed!
pools <- mutate(pools, retest = sign(positive) , tests = 1 + retest * k)
# 'mutate' adds two columns to the data frame, one called 'retest'
# and one called 'tests'. These columns are filled with the values provided.
# You can look at the pools variable before and after running this to see what changed!
pools <- mutate(pools, retest = sign(positive) , tests = 1 + retest * k)
View(pools)
# Take mean number of tests needed
mean(pools$tests) / k
# 'mutate' adds two columns to the data frame, one called 'retest'
# and one called 'tests'. These columns are filled with the values provided.
# You can look at the pools variable before and after running this to see what changed!
pools <- mutate(pools, retest = sign(positive) , tests = 1 + retest * k)
# Take mean number of tests needed
mean(pools$tests) / k
?sign
?sign
pools <- pools %>%
mutate(retest = sign(positive) , tests = 1 + retest * k)
pools <- pools %>%
mutate(retest = sign(positive) , tests = 1 + retest * k)
View(pools)
pools <- pools %>%
mutate(retest = sign(positive) , tests = 1 + retest * k)
z = -10 + 3i  # The imaginary number 2 + 3i
z %>%
Re() %>%  # Take the real part...
abs() %>% # then take the absolute value...
log(base = 10)  # then take log base ten.
# Same thing but now save it as the variable a
a <- z %>%
Re() %>%  # Take the real part...
abs() %>% # then take the absolute value...
log(base = 10)  # the take the log base ten.
print(a)
z = -10 + 3i
a = log(abs(Re(z)), base = 10)
# Modify this code.
z = -10 + 3i  # The imaginary number 2 + 3i
z %>%
Re() %>%  # Take the real part...
abs() %>% # then take the absolute value...
sqrt() %>% # then take the square root
log(base = 10)  # then take the log base ten.
# Modify this code.
z = -10 + 3i  # The imaginary number 2 + 3i
z %>%
Re() %>%  # Take the real part...
abs() %>% # then take the absolute value...
sqrt() %>% # then take the square root
log()  # then take the log base ten.
# This function takes in a pool size k and
# returns the mean number of tests needed
# to identify everybody that has COVID.
calc_tests <- function(k) {
pos_rate <- 0.05
samps <- 10000
positive = rbinom(n = samps, size = k, prob = pos_rate)  # Make new data for each run
pools <-  tibble(positive)
pools <- pools %>%
mutate(retest = sign(positive) , tests= 1 + retest * k)
output <- mean(pools$tests) / k
output  # Return the mean
}
calc_tests(2)  # Mean tests needed for when pools have three people each
# This function takes in a pool size k and
# returns the mean number of tests needed
# to identify everybody that has COVID.
calc_tests <- function(k) {
pos_rate <- 0.05 # positivity rate of covid
samps <- 10000 # number of pools we are sampling
positive = rbinom(n = samps, size = k, prob = pos_rate)  # Make new data for each run
pools <-  tibble(positive)
pools <- pools %>%
mutate(retest = sign(positive) , tests= 1 + retest * k)
output <- mean(pools$tests) / k # Return the mean return the average number of tests per person
output
}
print(output)
calc_tests(6)  # Mean tests needed for when pools have two people each, inputting k
calc_tests(2)  # Mean tests needed for when pools have two people each, inputting k
calc_tests(1)  # Mean tests needed for when pools have two people each, inputting k
# This function takes in a pool size k and
# returns the mean number of tests needed
# to identify everybody that has COVID.
calc_tests <- function(k) {
pos_rate <- 0.5 # positivity rate of covid
samps <- 10000 # number of pools we are sampling
positive = rbinom(n = samps, size = k, prob = pos_rate)  # Make new data for each run
pools <-  tibble(positive)
pools <- pools %>%
mutate(retest = sign(positive) , tests= 1 + retest * k)
output <- mean(pools$tests) / k # Return the mean return the average number of tests per person which is why we divide by k
output
}
calc_tests(1)  # Mean tests needed for when pools have two people each, inputting k
# This function takes in a pool size k and
# returns the mean number of tests needed
# to identify everybody that has COVID.
calc_tests <- function(k) {
pos_rate <- 0.05 # positivity rate of covid
samps <- 10000 # number of pools we are sampling
positive = rbinom(n = samps, size = k, prob = pos_rate)  # Make new data for each run
pools <-  tibble(positive)
pools <- pools %>%
mutate(retest = sign(positive) , tests= 1 + retest * k)
output <- mean(pools$tests) / k # Return the mean return the average number of tests per person which is why we divide by k
output
}
calc_tests(1)  # Mean tests needed for when pools have two people each, inputting k
# make a new tibble that contains the pool size *k*
# for each replicate and does each replicate 100 times.
keffects <- tibble(k = rep(seq(20), 100))
# make a new tibble that contains the pool size *k*
# for each replicate and does each replicate 100 times.
keffects <- tibble(k = rep(seq(20), 100))
# Calculate the average number of tests needed
keffects <- keffects %>%
rowwise() %>%
mutate(ave_tests = calc_tests(k), poolsize = as.integer(k))  # convert *k* to an integer to get geom_boxplot to work properly.
ggplot(data = keffects, aes(x = k, y = ave_tests, group = poolsize)) +
geom_boxplot()
avetests
head(avetests)
ave_tests
ave_tests
poolsize$ave_tests
# make a new tibble that contains the pool size *k*
# for each replicate and does each replicate 100 times.
keffects <- tibble(k = rep(seq(20), 100))
# Calculate the average number of tests needed
keffects <- keffects %>%
rowwise() %>%
mutate(ave_tests = calc_tests(k), poolsize = as.integer(k))  # convert *k* to an integer to get geom_boxplot to work properly.
ggplot(data = keffects, aes(x = k, y = ave_tests, group = poolsize)) +
geom_boxplot()
# make a new tibble that contains the pool size *k*
# for each replicate and does each replicate 100 times.
keffects <- tibble(k = rep(seq(100), 100))
# Calculate the average number of tests needed
keffects <- keffects %>%
rowwise() %>%
mutate(ave_tests = calc_tests(k), poolsize = as.integer(k))  # convert *k* to an integer to get geom_boxplot to work properly.
ggplot(data = keffects, aes(x = k, y = ave_tests, group = poolsize)) +
geom_boxplot()
